<!--

    eXist-db Open Source Native XML Database
    Copyright (C) 2001 The eXist-db Authors

    info@exist-db.org
    http://www.exist-db.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<TestSet xmlns:exist="http://exist.sourceforge.net/NS/exist">
    <testName>Variable references in location step</testName>
    <description>
        <p>These tests check eXist's behaviour when variable references are used in a location step, both on persistend nodes and in-memory nodes. Two test contexts are repeated:
            <ul>
                <li>the use of a variable reference in a location step</li>
                <li>the use of a variable reference inside a predicate</li>
            </ul>
        </p>
        <author>Ron Van den Branden</author>
    </description>
    <setup>
        <create-collection parent="/db" name="coll"/>
        <store collection="/db/coll" name="test.xml">
            <test>
                <a><el n="1">match1</el></a>
                <a><el n="2">match2</el></a>
                <b><el n="3">match2</el></b>
            </test>
        </store>
    </setup>
    <functions><![CDATA[
    declare variable $in-memory := 
            <test>
                <a><el n="1">match1</el></a>
                <a><el n="2">match2</el></a>
                <b><el n="3">match2</el></b>
            </test>;
    ]]></functions>
    <tearDown>
        <remove-collection collection="/db/coll"/>
    </tearDown>
    <test output="xml" ignore="yes">
        <task>[persistent] variable in location step</task>
        <code><![CDATA[
            let $test := collection('/db/coll')/test
            let $match2 := $test//el[matches(., 'match2')]
            return $test/a/$match2
        ]]></code>
        <expected>
            <el n="2">match2</el>
            <el n="3">match2</el>
        </expected>
    </test>
    <test output="xml" ignore="yes">
        <task>[persistent] variable in location step + predicate</task>
        <code><![CDATA[
            let $test := collection('/db/coll')/test
            let $match2 := $test//el[matches(., 'match2')]
            return $test/a[./$match2]
            ]]></code>
        <expected>
            <a>
                <el n="1">match1</el>
            </a>
            <a>
                <el n="2">match2</el>
            </a>
        </expected>
    </test>
    <test output="xml" ignore="yes">
        <task>[in-memory] variable in location step</task>
        <code><![CDATA[
            let $test := $in-memory
            let $match2 := $test//el[matches(., 'match2')]
            return $test/a/$match2
            ]]></code>
        <expected>
            <el n="2">match2</el>
            <el n="3">match2</el>
        </expected>
    </test>
    <test output="xml" ignore="yes">
        <task>[in-memory] variable in location step + predicate</task>
        <code><![CDATA[
            let $test := $in-memory
            let $match2 := $test//el[matches(., 'match2')]
            return $test/a[./$match2]
            ]]></code>
        <expected>
            <a>
                <el n="1">match1</el>
            </a>
            <a>
                <el n="2">match2</el>
            </a>
        </expected>
    </test>    
</TestSet>
